package nextdate

import (
	"errors"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// üî• HandleNextDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/nextdate
func HandleNextDate(w http.ResponseWriter, r *http.Request) {
	log.Println("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω!")

	// ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	nowStr := r.FormValue("now")
	dateStr := r.FormValue("date")
	repeat := r.FormValue("repeat")

	// ‚úÖ –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä `now` –≤ —Ñ–æ—Ä–º–∞—Ç–µ time.Time
	now, err := time.Parse("20060102", nowStr)
	if err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ now", http.StatusBadRequest)
		return
	}

	// ‚úÖ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é NextDate
	nextDate, err := NextDate(now, dateStr, repeat, "nextdate")
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: %s", err.Error()), http.StatusBadRequest)
		return
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte(nextDate))
}

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, dateStr string, repeat string, status string) (string, error) {
	log.Printf("üîç –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è NextDate —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: now=%s, date=%s, repeat=%s, status=%s\n", now.Format("20060102"), dateStr, repeat, status)
	if dateStr == "" {
		log.Println("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞")
		return "", nil
	}

	parsedDate, err := time.Parse("20060102", dateStr)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: %v\n", err)
		return "", nil
	}

	if repeat == "" {
		if parsedDate.After(now) {
			return parsedDate.Format("20060102"), nil
		}
		return "", nil
	}

	if strings.HasPrefix(repeat, "d ") {
		daysStr := strings.TrimPrefix(repeat, "d ")
		days, err := strconv.Atoi(daysStr)

		if err != nil || days < 1 || days > 400 {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %s\n", repeat)
			return "", errors.New("–Ω–µ–≤–µ—Ä–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
		}

		if status != "done" {
			if isSameDate(parsedDate, now) {
				return parsedDate.Format("20060102"), nil
			}
		}

		nextDate := parsedDate.AddDate(0, 0, days)

		for !nextDate.After(now) {
			nextDate = nextDate.AddDate(0, 0, days)
		}

		return nextDate.Format("20060102"), nil
	}

	if repeat == "y" {
		nextDate := parsedDate.AddDate(1, 0, 0)
		if parsedDate.Month() == time.February && parsedDate.Day() == 29 {
			if nextDate.Month() != time.February || nextDate.Day() != 29 {
				nextDate = time.Date(nextDate.Year(), time.March, 1, 0, 0, 0, 0, nextDate.Location())
			}
		}

		if nextDate.Before(now) {
			for !nextDate.After(now) {
				nextDate = nextDate.AddDate(1, 0, 0)
			}
		}
		return nextDate.Format("20060102"), nil
	}

	log.Printf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %s\n", repeat)
	return "", errors.New("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
}

func isSameDate(a, b time.Time) bool {
	return a.Year() == b.Year() && a.Month() == b.Month() && a.Day() == b.Day()
}
