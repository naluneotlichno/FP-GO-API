package nextdate

import (
    "fmt"     // üìú –†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    "strconv" // üî¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
    "strings" // ‚úÇÔ∏è –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç. –¥.)
    "time"    // ‚è≥ –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    "log"     // üìù –†–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–≥–∞–º–∏
)

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, date string, repeat string) (string, error) {
    log.Printf("üîç [DEBUG] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: now=%s, date=%s, repeat=%s",
        now.Format("20060102"), date, repeat)

    // 1. –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É (date)
    parsedDate, err := time.Parse("20060102", date)
    if err != nil {
        return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '%s'", date)
    }
    log.Printf("‚úÖ [DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —É—Å–ø–µ—à–µ–Ω: %s", parsedDate.Format("20060102"))

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if repeat == "" {
        return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞ –∏–ª–∏ –æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è (parsedDate <= now)
    // –ï—Å–ª–∏ parsedDateAfterNow == true, –∑–Ω–∞—á–∏—Ç parsedDate > now
    parsedDateAfterNow := parsedDate.After(now)

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ repeat ---
    // 1) –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: repeat = "y"
    if repeat == "y" {
        nextDate := parsedDate

        if !parsedDateAfterNow {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ <= now, –∫—Ä—É—Ç–∏–º +1 –≥–æ–¥, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç > now
            for !nextDate.After(now) {
                nextDate = nextDate.AddDate(1, 0, 0)
            }
        } else {
            // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ > now, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º +1 –≥–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑
            nextDate = nextDate.AddDate(1, 0, 0)
        }

        log.Printf("‚úÖ [DEBUG] –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", nextDate.Format("20060102"))
        return nextDate.Format("20060102"), nil
    }

    // 2) –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ N –¥–Ω–µ–π: repeat = "d N"
    if strings.HasPrefix(repeat, "d ") {
        parts := strings.Split(repeat, " ")
        if len(parts) != 2 {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
        }

        days, err := strconv.Atoi(parts[1])
        if err != nil || days < 1 || days > 400 {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π '%s'", parts[1])
        }

        nextDate := parsedDate

        if !parsedDateAfterNow {
            // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ <= now, –∫—Ä—É—Ç–∏–º –ø–æ days, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç > now
            for !nextDate.After(now) {
                nextDate = nextDate.AddDate(0, 0, days)
            }
        } else {
            // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ > now, –¥–µ–ª–∞–µ–º –æ–¥–Ω—É –ø—Ä–∏–±–∞–≤–∫—É –Ω–∞ days
            nextDate = nextDate.AddDate(0, 0, days)
        }

        log.Printf("‚úÖ [DEBUG] –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π. –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", days, nextDate.Format("20060102"))
        return nextDate.Format("20060102"), nil
    }

    // 3) –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
}
