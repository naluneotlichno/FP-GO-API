package nextdate

import (
	"fmt"     // üìú –†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	"strconv" // üî¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
	"strings" // ‚úÇÔ∏è –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç. –¥.)
	"time"    // ‚è≥ –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
)

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, date string, repeat string) (string, error) {
	// üîç –®–∞–≥ 1: –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É (date), —á—Ç–æ–±—ã Go –º–æ–≥ —Å –Ω–µ–π —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å `time.Time`
	parsedDate, err := time.Parse("20060102", date)
	if err != nil {
		return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '%s'", date)
	}

	// üõë –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
	if repeat == "" {
		return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
	}

	// üîÑ –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ `y` (–µ–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
	if repeat == "y" {
		nextDate := parsedDate.AddDate(1, 0, 0) // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ 1 –≥–æ–¥
		return nextDate.Format("20060102"), nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
	}

	// üìÜ –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ `d <—á–∏—Å–ª–æ>` (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ N –¥–Ω–µ–π)
	if strings.HasPrefix(repeat, "d ") { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å "d "
		parts := strings.Split(repeat, " ") // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª—É: ["d", "7"]
		if len(parts) != 2 {
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
		}

		days, err := strconv.Atoi(parts[1])       // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π) –≤ —á–∏—Å–ª–æ
		if err != nil || days < 1 || days > 400 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ–µ (1 ‚â§ N ‚â§ 400)
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π '%s'", repeat)
		}

		nextDate := parsedDate.AddDate(0, 0, days) // –ü—Ä–∏–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
		return nextDate.Format("20060102"), nil    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	}

	// üö´ –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
	return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
}
