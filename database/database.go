package database

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	_ "github.com/go-sql-driver/mysql"
	_ "github.com/mattn/go-sqlite3"
	"github.com/naluneotlichno/FP-GO-API/api"
)

var db *sql.DB
var ErrTask = fmt.Errorf("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

type Task struct {
	ID      int64  `json:"id"`
	Date    string `json:"date"`
	Title   string `json:"title"`
	Comment string `json:"comment"`
	Repeat  string `json:"repeat"`
}

func GetDBPath() string {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
	workingDir, err := os.Getwd() // –≠—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	dbPath := filepath.Join(workingDir, "scheduler.db")

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TODO_DBFILE –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
	if envDB := os.Getenv("TODO_DBFILE"); envDB != "" {
		return envDB
	}

	return dbPath
}

// InitDB —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É scheduler, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func InitDB(dbPath string) error {
	var err error
	db, err = sql.Open("sqlite3", dbPath)
	if err != nil {
		return err
	}

	log.Printf("‚úÖüîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ: %s", dbPath)

	if err := db.Ping(); err != nil {
		return fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %w", err)
	}

	createTableSQL := `
	CREATE TABLE IF NOT EXISTS scheduler (
		id INTEGER PRIMARY KEY AUTOINCREMENT, 
		date TEXT NOT NULL,
		title TEXT NOT NULL, 
		comment TEXT, 
		repeat TEXT(128)
	);
	CREATE INDEX IF NOT EXISTS idx_date ON scheduler(date); 
	CREATE INDEX IF NOT EXISTS idx_title ON scheduler(title);
	`
	_, err = db.Exec(createTableSQL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
		return err
	}

	log.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler –≤ [%s] —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å", dbPath)
	return nil
}

func GetDB() (*sql.DB, error) {
	if db == nil {
		return nil, fmt.Errorf("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ InitDB()")
	}
	return db, nil
}

func DeleteTask(id int64) error {

	res, err := db.Exec(`DELETE FROM scheduler WHERE id=?`, id)
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DELETE: %v\n", err)
		return err
	}

	n, err := res.RowsAffected()
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫: %v\n", err)
		return err
	}

	if n == 0 {
		log.Printf("üö® [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	log.Printf("‚úÖ [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)
	return nil
}

func UpdateTask(task Task) error {
	_, err := api.NextDate(time.Now(), task.Date, task.Repeat, "check")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: %w", err)
	}

	query := `
		UPDATE scheduler
		SET date = ?, title = ?, comment = ?, repeat = ?
		WHERE id = ?
	`

	res, err := db.Exec(query, task.Date, task.Title, task.Comment, task.Repeat, task.ID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %w", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	return nil
}

func GetTaskByID(id int64) (Task, error) {
	var task Task
	log.Println("üîç [getTaskByID] –í—ã–ø–æ–ª–Ω—è–µ–º SELECT...")
	query := `SELECT id, date, title, comment, repeat FROM scheduler WHERE id=?`
	err := db.QueryRow(query, id).Scan(&task.ID, &task.Date, &task.Title, &task.Comment, &task.Repeat)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			log.Printf("üö® [getTaskByID] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
			return Task{}, errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		}
		log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return Task{}, err
	}
	log.Printf("‚úÖ [getTaskByID] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", task)
	return task, nil
}
