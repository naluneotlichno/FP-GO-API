package database

import (
	"database/sql"
	"log"

	_ "github.com/go-sql-driver/mysql"
	_ "github.com/mattn/go-sqlite3"
)

var db *sql.DB

// InitDB —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É scheduler, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func InitDB(dbPath string) error {
	var err error
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return err
	}

	log.Printf("‚úÖüîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ: %s", dbPath)

	defer func() {
		if cerr := db.Close(); cerr != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", cerr)
		}
	}()

	createTableSQL := `
	CREATE TABLE IF NOT EXISTS scheduler (
		id INTEGER PRIMARY KEY AUTOINCREMENT, 
		date TEXT NOT NULL,
		title TEXT NOT NULL, 
		comment TEXT, 
		repeat TEXT(128)
	);
	CREATE INDEX IF NOT EXISTS idx_date ON scheduler(date); 
	CREATE INDEX IF NOT EXISTS idx_title ON scheduler(title);
	`
	_, err = db.Exec(createTableSQL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
		return err
	}

	log.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler –≤ [%s] —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å", dbPath)
	return nil
}

func GetDB() *sql.DB {
	if db == nil {
		log.Fatal("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ InitDB()")
	}
	return db
}
