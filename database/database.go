package database

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"

	_ "github.com/go-sql-driver/mysql"
	_ "github.com/mattn/go-sqlite3"
)

var db *sql.DB

func GetDBPath() string {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
	workingDir, err := os.Getwd() // –≠—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	dbPath := filepath.Join(workingDir, "scheduler.db")

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TODO_DBFILE –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
	if envDB := os.Getenv("TODO_DBFILE"); envDB != "" {
		return envDB
	}

	return dbPath
}

// InitDB —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É scheduler, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func InitDB(dbPath string) error {
	var err error
	db, err = sql.Open("sqlite3", dbPath)
	if err != nil {
		return err
	}

	log.Printf("‚úÖüîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ: %s", dbPath)

	if err := db.Ping(); err != nil {
		return fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %w", err)
	}

	createTableSQL := `
	CREATE TABLE IF NOT EXISTS scheduler (
		id INTEGER PRIMARY KEY AUTOINCREMENT, 
		date TEXT NOT NULL,
		title TEXT NOT NULL, 
		comment TEXT, 
		repeat TEXT(128)
	);
	CREATE INDEX IF NOT EXISTS idx_date ON scheduler(date); 
	CREATE INDEX IF NOT EXISTS idx_title ON scheduler(title);
	`
	_, err = db.Exec(createTableSQL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
		return err
	}

	log.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler –≤ [%s] —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å", dbPath)
	return nil
}

func GetDB() (*sql.DB, error) {
	if db == nil {
		return nil, fmt.Errorf("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ InitDB()")
	}
	return db, nil
}

func deleteTask(id int64) error {

	res, err := db.Exec(`DELETE FROM scheduler WHERE id=?`, idInt)
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DELETE: %v\n", err)
		return err
	}

	db, err := GetDB()
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	n, _ := res.RowsAffected()
	if n == 0 {
		log.Printf("üö® [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	log.Printf("‚úÖ [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)
	return nil
}

func updateTaskDate(id, newDate string) error {
	log.Printf("üîç [updateTaskDate] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ ID=%s –Ω–∞ %s\n", id, newDate)
	db, err := database.GetDB()
	if err != nil {
		log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [updateTaskDate] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	res, err := db.Exec(`UPDATE scheduler SET date=? WHERE id=?`, newDate, idInt)
	if err != nil {
		log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UPDATE: %v\n", err)
		return err
	}

	n, _ := res.RowsAffected()
	if n == 0 {
		log.Printf("üö® [updateTaskDate] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n", id)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	log.Printf("‚úÖ [updateTaskDate] –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ ID=%s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n", id)
	return nil
}

func getTaskByID(id string) (Task, error) {
	log.Printf("üîç [getTaskByID] –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É ID=%s –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n", id)
	db, err := database.GetDB()
	if err != nil {
		log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return Task{}, errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [getTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return Task{}, errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	var t Task
	log.Println("üîç [getTaskByID] –í—ã–ø–æ–ª–Ω—è–µ–º SELECT...")
	row := db.QueryRow(`SELECT id, date, title, comment, repeat FROM scheduler WHERE id=?`, idInt)
	err = row.Scan(&t.ID, &t.Date, &t.Title, &t.Comment, &t.Repeat)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("üö® [getTaskByID] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
			return Task{}, errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		}
		log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return Task{}, err
	}
	log.Printf("‚úÖ [getTaskByID] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", t)
	return t, nil
}
