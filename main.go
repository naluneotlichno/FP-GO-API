package main

import (
	"log"
	"net/http"
	"os"

	"github.com/naluneotlichno/FP-GO-API/api"
	"github.com/naluneotlichno/FP-GO-API/database"
)

func main() {
	log.Println("‚úÖ üî• –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞!")

	// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	if err := database.InitDB(database.GetDBPath()); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
	registerHandlers()

	// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	startServer()
}

// üî• registerHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
func registerHandlers() {
	// –û–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç /api/task, –Ω–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–Ω—É—Ç—Ä–∏
	http.HandleFunc("/api/task", func(w http.ResponseWriter, r *http.Request) {
		switch r.Method {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (POST)
		case http.MethodPost:
			api.AddTaskHandler(w, r)
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID (GET)
		case http.MethodGet:
			api.GetTaskHandler(w, r)
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (PUT)
		case http.MethodPut:
			api.UpdateTaskHandler(w, r)
		default:
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		}
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á (GET)
	http.HandleFunc("/api/tasks", api.GetTasksHandler)

	// –î–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏–∫–∏ (–≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
	http.Handle("/", http.FileServer(http.Dir("./web"))) 
}

// üî• startServer –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
func startServer() {
	port := os.Getenv("TODO_PORT")
	if port == "" {
		port = "7540"
	}

	log.Printf("‚úÖ üöÄ –°–µ—Ä–≤–µ—Ä –≤—ã–µ–∑–∂–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç %s. –ü–æ–¥—Ä—É–±–∞–µ–º—Å—è!", port)
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Fatalf("‚ùå –û–π-–æ–π, —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª: %v", err)
	}
}
