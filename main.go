package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"time"

	"github.com/naluneotlichno/FP-GO-API/database"
	"github.com/naluneotlichno/FP-GO-API/nextdate"
)

func main() {
	log.Println("‚úÖ üî• –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞!")

	dbPath := getDBPath()
	if err := database.InitDB(dbPath); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (–≤ main): %v", err)
	}

	log.Println("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /api/nextdate")
	http.HandleFunc("/api/nextdate", handleNextDate)

	startServer()
}

func handleNextDate(w http.ResponseWriter, r *http.Request) {
	log.Println("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω!")

	nowStr := r.FormValue("now")    // –ü–æ–ª—É—á–∞–µ–º "now" –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	dateStr := r.FormValue("date")  // –ü–æ–ª—É—á–∞–µ–º "date"
	repeat := r.FormValue("repeat") // –ü–æ–ª—É—á–∞–µ–º "repeat"

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–∞—Ä—Å–∏–º `now`
	now, err := time.Parse("20060102", nowStr)
	if err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ now", http.StatusBadRequest)
		return
	}

	// ‚úÖ –í—ã–∑—ã–≤–∞–µ–º NextDate(), –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
	nextDate, err := nextdate.NextDate(now, dateStr, repeat)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	fmt.Fprint(w, nextDate)
}

// getDBPath –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func getDBPath() string {
	_, filename, _, ok := runtime.Caller(0)
	if !ok {
		log.Println("‚ùå runtime.Caller(0) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, dbPath –±—É–¥–µ—Ç 'scheduler.db'")
		return "scheduler.db"
	}

	baseDir := filepath.Dir(filename)
	dbPath := filepath.Join(baseDir, "scheduler.db")

	if envDB := os.Getenv("TODO_DBFILE"); envDB != "" {
		return envDB
	}

	return dbPath
}

// startServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä
func startServer() {
	webDir := "./web"
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir(webDir))))

	port := os.Getenv("TODO_PORT")
	if port == "" {
		port = "7540"
	}

	log.Printf("‚úÖ üöÄ –°–µ—Ä–≤–µ—Ä –≤—ã–µ–∑–∂–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç %s. –ü–æ–¥—Ä—É–±–∞–µ–º—Å—è!", port)
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Fatalf("‚ùå –û–π-–æ–π, —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª: %v", err)
	}
}
