package api

import (
    "database/sql"
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "time"

    "github.com/naluneotlichno/FP-GO-API/database"
)

// üî• TasksResponse ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
type TasksResponse struct {
    Tasks []TaskItem `json:"tasks"`
}

// üî• TaskItem ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã–µ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞)
type TaskItem struct {
    ID      string `json:"id"`
    Date    string `json:"date"`
    Title   string `json:"title"`
    Comment string `json:"comment"`
    Repeat  string `json:"repeat"`
}

// üî• GetTasksHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/tasks
func GetTasksHandler(w http.ResponseWriter, r *http.Request) {
    log.Println("üî• [GetTasksHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    w.Header().Set("Content-Type", "application/json; charset=utf-8")

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ (GET)
    if r.Method != http.MethodGet {
        log.Printf("‚ùå [MethodCheck] –ú–µ—Ç–æ–¥ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", r.Method)
        http.Error(w, `{"error":"–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}`, http.StatusMethodNotAllowed)
        return
    }

    // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log.Println("‚úÖ [DBConnection] –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π")
    db, err := database.GetDB()
    if err != nil {
        log.Printf("‚ùå [DBConnection] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
        http.Error(w, `{"error":"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}`, http.StatusInternalServerError)
        return
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä search=? –∏–∑ URL
    searchParam := r.URL.Query().Get("search")

    // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑—Ä–∞—â–∞—Ç—å "—Ç–æ–Ω–Ω—É" –¥–∞–Ω–Ω—ã—Ö.
    limit := 50

    // –ó–∞–ø—Ä–æ—Å–∏–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    // –¢.–∫. —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É "–ø–æ –¥–∞—Ç–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è",
    // –¥–æ–±–∞–≤–∏–º "ORDER BY date".
    // –ï—Å–ª–∏ searchParam –ø—É—Å—Ç–æ–π ‚Üí –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ.
    var rows *sql.Rows

    if searchParam == "" {
        // ‚ûú –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ search ‚Üí –≤—ã–¥–∞—Ç—å –≤—Å–µ (–¥–æ limit)
        query := `SELECT id, date, title, comment, repeat
                  FROM scheduler
                  ORDER BY date
                  LIMIT ?`
        rows, err = db.Query(query, limit)
        if err != nil {
            log.Printf("‚ùå [DBQuery] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞: %v", err)
            http.Error(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`, http.StatusInternalServerError)
            return
        }
    } else {
        // ‚ûú –ï—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä search
        log.Printf("‚úÖ [Search] –ü–∞—Ä–∞–º–µ—Ç—Ä search=%s", searchParam)

        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å search –∫–∞–∫ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy (02.01.2006)
        parsedDate, parseErr := time.Parse("02.01.2006", searchParam)
        if parseErr == nil {
            // –£–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Üí –∑–Ω–∞—á–∏—Ç –∏—â–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            dateStr := parsedDate.Format("20060102")
            log.Printf("‚úÖ [Search] –†–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –¥–∞—Ç—É %s (YYYYMMDD)", dateStr)

            query := `SELECT id, date, title, comment, repeat
                      FROM scheduler
                      WHERE date = ?
                      ORDER BY date
                      LIMIT ?`
            rows, err = db.Query(query, dateStr, limit)
            if err != nil {
                log.Printf("‚ùå [DBQuery] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∞—Ç–µ: %v", err)
                http.Error(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`, http.StatusInternalServerError)
                return
            }
        } else {
            // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ title –∏–ª–∏ comment
            likePattern := "%" + searchParam + "%"
            log.Printf("‚úÖ [Search] –°—Ç—Ä–æ–∫–æ–≤—ã–π –ø–æ–∏—Å–∫ LIKE '%s'", likePattern)

            query := `SELECT id, date, title, comment, repeat
                      FROM scheduler
                      WHERE title LIKE ? OR comment LIKE ?
                      ORDER BY date
                      LIMIT ?`
            rows, err = db.Query(query, likePattern, likePattern, limit)
            if err != nil {
                log.Printf("‚ùå [DBQuery] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ LIKE: %v", err)
                http.Error(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`, http.StatusInternalServerError)
                return
            }
        }
    }

    defer rows.Close()

    // ‚úÖ –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä TaskItem
    var tasks []TaskItem
    for rows.Next() {
        var (
            id      int64
            date    string
            title   string
            comment string
            repeat  string
        )
        if err := rows.Scan(&id, &date, &title, &comment, &repeat); err != nil {
            log.Printf("‚ùå [DBScan] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
            http.Error(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`, http.StatusInternalServerError)
            return
        }
        tasks = append(tasks, TaskItem{
            ID:      fmt.Sprint(id),
            Date:    date,
            Title:   title,
            Comment: comment,
            Repeat:  repeat,
        })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
    if err := rows.Err(); err != nil {
        log.Printf("‚ùå [RowsErr] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫: %v", err)
        http.Error(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`, http.StatusInternalServerError)
        return
    }

    // ‚úÖ –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, tasks=nil ‚Üí —Å–¥–µ–ª–∞–µ–º tasks = []TaskItem{}
    if tasks == nil {
        tasks = []TaskItem{}
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response := TasksResponse{
        Tasks: tasks,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
    if err := json.NewEncoder(w).Encode(response); err != nil {
        log.Printf("‚ùå [Response] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
    }
}
