package api

import (
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// üî• HandleNextDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/nextdate
func HandleNextDate(w http.ResponseWriter, r *http.Request) {
	log.Println("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω!")

	// ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	nowStr := r.FormValue("now")
	dateStr := r.FormValue("date")
	repeat := r.FormValue("repeat")

	// ‚úÖ –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä `now` –≤ —Ñ–æ—Ä–º–∞—Ç–µ time.Time
	now, err := time.Parse("20060102", nowStr)
	if err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ now", http.StatusBadRequest)
		return
	}

	// ‚úÖ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é NextDate
	nextDate, err := NextDate(now, dateStr, repeat)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: %s", err.Error()), http.StatusBadRequest)
		return
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	fmt.Fprint(w, nextDate)
}

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, dateStr string, repeat string) (string, error) {
	// –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É
	parsedDate, err := time.Parse("20060102", dateStr)
	if err != nil {
		// –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, —Ç–µ—Å—Ç—ã –∂–¥—É—Ç "–ø—É—Å—Ç–æ–π" (–æ—à–∏–±–∫—É ‚Üí –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
	}

	// –ï—Å–ª–∏ repeat –ø—É—Å—Ç–æ–π, —Ç–µ—Å—Ç —Ç–æ–∂–µ –∂–¥—ë—Ç "", –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞
	if repeat == "" {
		return "", fmt.Errorf("–ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–æ")
	}

	// 1) –ï—Å–ª–∏ repeat = "y" (–µ–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
	if repeat == "y" {
		// –ë—É–¥–µ–º –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –≥–æ–¥, –ø–æ–∫–∞ –¥–∞—Ç–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ now
		nextDate := parsedDate

		// –ï—Å–ª–∏ parsedDate <= now, –∫—Ä—É—Ç–∏–º –≥–æ–¥, –ø–æ–∫–∞ –Ω–µ —É–π–¥—ë–º –∑–∞ now
		for !nextDate.After(now) {
			nextDate = addYearFixLeap(parsedDate, nextDate)
		}
		// –ï—Å–ª–∏ parsedDate > now, –¥–µ–ª–∞–µ–º –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é
		if parsedDate.After(now) && nextDate == parsedDate {
			nextDate = addYearFixLeap(parsedDate, nextDate)
		}

		return nextDate.Format("20060102"), nil
	}

	// 2) –ï—Å–ª–∏ repeat = "d N" (–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ N –¥–Ω–µ–π)
	if strings.HasPrefix(repeat, "d ") {
		parts := strings.Split(repeat, " ")
		if len(parts) != 2 {
			return "", fmt.Errorf("—Ñ–æ—Ä–º–∞—Ç d N –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
		}
		days, err := strconv.Atoi(parts[1])
		if err != nil || days < 1 || days > 400 {
			// ‚úÖ –í–ê–ñ–ù–û: —Ç–µ—Å—Ç –æ–∂–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ days –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
			return "", fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π '%s'", parts[1])
		}

		nextDate := parsedDate
		// –ï—Å–ª–∏ parsedDate <= now, –ø—Ä–∏–±–∞–≤–ª—è–µ–º +days, –ø–æ–∫–∞ –Ω–µ –≤—ã–ª–µ–∑–µ–º –∑–∞ now
		for !nextDate.After(now) {
			nextDate = nextDate.AddDate(0, 0, days)
		}
		// –ï—Å–ª–∏ parsedDate > now –∏ –º—ã –≤—Å—ë –µ—â—ë –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–µ, –¥–µ–ª–∞–µ–º 1 –∏—Ç–µ—Ä–∞—Ü–∏—é
		if parsedDate.After(now) && nextDate == parsedDate {
			nextDate = nextDate.AddDate(0, 0, days)
		}

		return nextDate.Format("20060102"), nil
	}

	// 3) –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã (w ..., m ...), —ç—Ç–æ —É–∂–µ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
	return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π repeat: %s", repeat)
}

// addYearFixLeap –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç —Ä–æ–≤–Ω–æ 1 –≥–æ–¥ –∫ currentDate, —É—á–∏—Ç—ã–≤–∞—è "—Å–∫–∞—á–æ–∫" —Å 29.02 –Ω–∞ 01.03:
func addYearFixLeap(originalDate, currentDate time.Time) time.Time {
	next := currentDate.AddDate(1, 0, 0)
	// –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ 29.02, –∞ Go —Å–¥–≤–∏–Ω—É–ª –Ω–∞ 28.02, —Ç–æ –ø—Ä–∞–≤–∏–º –Ω–∞ 01.03
	if originalDate.Month() == time.February && originalDate.Day() == 29 &&
		next.Month() == time.February && next.Day() == 28 {
		return time.Date(next.Year(), time.March, 1, 0, 0, 0, 0, next.Location())
	}
	return next
}
