package api

import (
    "fmt"
    "log"
    "strconv"
    "strings"
    "time"
)

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, date string, repeat string) (string, error) {
    log.Printf("üîç [DEBUG] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: now=%s, date=%s, repeat=%s",
        now.Format("20060102"), date, repeat)

    // 1. –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É (date)
    parsedDate, err := time.Parse("20060102", date)
    if err != nil {
        return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '%s'", date)
    }
    log.Printf("‚úÖ [DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —É—Å–ø–µ—à–µ–Ω: %s", parsedDate.Format("20060102"))

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if repeat == "" {
        // –ü–æ —É—Å–ª–æ–≤–∏—é —Ç–µ—Å—Ç–∞ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
    }

 

    // 1) –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: repeat = "y"
    if repeat == "y" {
        nextDate := parsedDate
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ <= now, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ–¥, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç > now
        for !nextDate.After(now) {
            nextDate = nextDate.AddDate(1, 0, 0)
        }
        log.Printf("‚úÖ [DEBUG] –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", nextDate.Format("20060102"))
        return nextDate.Format("20060102"), nil
    }

    // 2) –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ N –¥–Ω–µ–π: repeat = "d N"
    if strings.HasPrefix(repeat, "d ") {
        parts := strings.Split(repeat, " ")
        if len(parts) != 2 {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
        }

        days, err := strconv.Atoi(parts[1])
        if err != nil || days < 1 || days > 400 {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π '%s'", parts[1])
        }

        nextDate := parsedDate
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ <= now, –∫—Ä—É—Ç–∏–º +days, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç > now
        for !nextDate.After(now) {
            nextDate = nextDate.AddDate(0, 0, days)
        }
        log.Printf("‚úÖ [DEBUG] –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π. –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", days, nextDate.Format("20060102"))
        return nextDate.Format("20060102"), nil
    }

    // 3) –ü–æ–≤—Ç–æ—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: repeat = "w 1,3,5" –∏ —Ç.–ø.
    //    –î–æ–ø—É—Å—Ç–∏–º, Sunday=0, Monday=1, ..., Saturday=6. –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è > now.
    if strings.HasPrefix(repeat, "w ") {
        pattern := strings.TrimSpace(strings.TrimPrefix(repeat, "w "))
        if pattern == "" {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
        }
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
        parts := strings.Split(pattern, ",")
        var validDays []int
        for _, p := range parts {
            p = strings.TrimSpace(p)
            dayN, err := strconv.Atoi(p)
            if err != nil || dayN < 0 || dayN > 6 {
                return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ '%s'", p)
            }
            validDays = append(validDays, dayN)
        }
        if len(validDays) == 0 {
            return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
        }

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â—É—é —É—Å–ª–æ–≤–∏—é dayOfWeek ‚àà validDays –∏ > now
        nextDate := parsedDate
        // –°–¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –¥–Ω—è–º –≤–ø–µ—Ä—ë–¥, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ now –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        for !nextDate.After(now) || !containsDayOfWeek(nextDate, validDays) {
            nextDate = nextDate.AddDate(0, 0, 1)
        }
        log.Printf("‚úÖ [DEBUG] –ü–æ–≤—Ç–æ—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ %v. –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", validDays, nextDate.Format("20060102"))
        return nextDate.Format("20060102"), nil
    }

    // 4) –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
}

// containsDayOfWeek –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–∞—Ç—ã t –≤ —Å–ø–∏—Å–æ–∫ validDays
func containsDayOfWeek(t time.Time, validDays []int) bool {
    wday := int(t.Weekday()) // Sunday=0, Monday=1, ...
    for _, d := range validDays {
        if d == wday {
            return true
        }
    }
    return false
}
