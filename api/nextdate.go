package api

import (
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// üî• HandleNextDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/nextdate
func HandleNextDate(w http.ResponseWriter, r *http.Request) {
	log.Println("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω!")

	// ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	nowStr := r.FormValue("now")
	dateStr := r.FormValue("date")
	repeat := r.FormValue("repeat")

	// ‚úÖ –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä `now` –≤ —Ñ–æ—Ä–º–∞—Ç–µ time.Time
	now, err := time.Parse("20060102", nowStr)
	if err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ now", http.StatusBadRequest)
		return
	}

	// ‚úÖ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é NextDate
	nextDate, err := NextDate(now, dateStr, repeat)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: %s", err.Error()), http.StatusBadRequest)
		return
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	fmt.Fprint(w, nextDate)
}

// NextDate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `20060102` (YYYYMMDD) –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
func NextDate(now time.Time, date string, repeat string) (string, error) {
	log.Printf("üîç [DEBUG] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: now=%s, date=%s, repeat=%s",
		now.Format("20060102"), date, repeat)

	// 1. –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É (date)
	parsedDate, err := time.Parse("20060102", date)
	if err != nil {
		return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '%s'", date)
	}
	log.Printf("‚úÖ [DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —É—Å–ø–µ—à–µ–Ω: %s", parsedDate.Format("20060102"))

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
	if repeat == "" {
		// –¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∑–Ω–∞—á–∏—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
	}

	// --- 1) –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: repeat = "y" ---
	if repeat == "y" {
		// –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ 1 –≥–æ–¥
		nextDate := parsedDate.AddDate(1, 0, 0)

		// –õ–æ–≤–∏–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ 29.02, –∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π -> 28.02
		if parsedDate.Month() == time.February && parsedDate.Day() == 29 &&
			nextDate.Month() == time.February && nextDate.Day() == 28 {
			nextDate = time.Date(nextDate.Year(), time.March, 1, 0, 0, 0, 0, nextDate.Location())
		}

		log.Printf("‚úÖ [DEBUG] –ï–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", nextDate.Format("20060102"))
		return nextDate.Format("20060102"), nil
	}

	// --- 2) –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ N –¥–Ω–µ–π: repeat = "d N" ---
	if strings.HasPrefix(repeat, "d ") {
		parts := strings.Split(repeat, " ")
		if len(parts) != 2 {
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
		}

		days, err := strconv.Atoi(parts[1])
		if err != nil || days < 1 || days > 400 {
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π '%s'", parts[1])
		}

		// –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º N –¥–Ω–µ–π –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ
		nextDate := parsedDate.AddDate(0, 0, days)
		log.Printf("‚úÖ [DEBUG] –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π. –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", days, nextDate.Format("20060102"))
		return nextDate.Format("20060102"), nil
	}

	// --- 3) –ü–æ–≤—Ç–æ—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: repeat = "w 1,3,5" –∏ —Ç.–ø. ---
	if strings.HasPrefix(repeat, "w ") {
		pattern := strings.TrimSpace(strings.TrimPrefix(repeat, "w "))
		if pattern == "" {
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ '%s'", repeat)
		}
		// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
		parts := strings.Split(pattern, ",")
		var validDays []int
		for _, p := range parts {
			p = strings.TrimSpace(p)
			dayN, err := strconv.Atoi(p)
			if err != nil || dayN < 0 || dayN > 6 {
				return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ '%s'", p)
			}
			validDays = append(validDays, dayN)
		}
		if len(validDays) == 0 {
			return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
		}

		// –¢—É—Ç –ª–æ–≥–∏–∫–∞, –º–æ–∂–µ—Ç, —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ¬´+1 –¥–µ–Ω—å¬ª, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
		// –ù–æ –¢–ï–°–¢–û–í –ù–ê "w" –º—ã —Ç—É—Ç –Ω–µ –≤–∏–¥–∏–º(?). –ï—Å–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∑–Ω–∞—á–∏—Ç –∏—â–µ–º "—Å–ª–µ–¥—É—é—â—É—é" –¥–∞—Ç—É > parsedDate,
		// —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â—É—é –¥–Ω—é –Ω–µ–¥–µ–ª–∏.
		nextDate := parsedDate
		for {
			nextDate = nextDate.AddDate(0, 0, 1)
			if checkDayOfWeek(nextDate, validDays) {
				break
			}
		}
		log.Printf("‚úÖ [DEBUG] –ü–æ–≤—Ç–æ—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ %v. –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: %s", validDays, nextDate.Format("20060102"))
		return nextDate.Format("20060102"), nil
	}

	// --- 4) –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ---
	return "", fmt.Errorf("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è '%s'", repeat)
}

func checkDayOfWeek(t time.Time, validDays []int) bool {
	wday := int(t.Weekday()) // Sunday=0, Monday=1, ...
	for _, d := range validDays {
		if d == wday {
			return true
		}
	}
	return false
}
