package api

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/naluneotlichno/FP-GO-API/nextdate"
	"github.com/naluneotlichno/FP-GO-API/database"
)

// –¢–µ –∂–µ –∏–º–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä, —á—Ç–æ –≤ "–ö–û–î 1"
type AddTaskRequest struct {
	Date    string `json:"date"`
	Title   string `json:"title"`
	Comment string `json:"comment"`
	Repeat  string `json:"repeat"`
}

type AddTaskResponse struct {
	ID    string `json:"id,omitempty"`
	Error string `json:"error,omitempty"`
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
const layout = "20060102"

// AddTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/task (–∞–Ω–∞–ª–æ–≥ ¬´–ö–û–î 1¬ª).
func AddTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üöÄ [AddTaskHandler] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞")

	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	if r.Method != http.MethodPost {
		log.Printf("‚ùå [MethodCheck] –ú–µ—Ç–æ–¥ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", r.Method)
		http.Error(w, `{"error":"–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}`, http.StatusMethodNotAllowed)
		return
	}

	// 1) –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("‚ùå [BodyRead] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ: %v", err)
		respondWithJSON(w, http.StatusBadRequest, AddTaskResponse{Error: "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}
	defer r.Body.Close()

	// 2) –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	var req AddTaskRequest
	if err := json.Unmarshal(body, &req); err != nil {
		log.Printf("‚ùå [JSONDecode] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		respondWithJSON(w, http.StatusBadRequest, AddTaskResponse{Error: "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"})
		return
	}

	// 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ title
	req.Title = strings.TrimSpace(req.Title)
	if req.Title == "" {
		respondWithJSON(w, http.StatusBadRequest, AddTaskResponse{Error: "–Ω–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏"})
		return
	}

	// 4) –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
	now := time.Now()
	if strings.TrimSpace(req.Date) == "" {
		req.Date = now.Format(layout)
	}

	// 5) –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
	taskDate, err := time.Parse(layout, req.Date)
	if err != nil {
		log.Printf("‚ùå [DateParse] –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ: %v", err)
		respondWithJSON(w, http.StatusBadRequest, AddTaskResponse{Error: "–¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"})
		return
	}

	// 6) –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º repeat
	if taskDate.Before(now) {
		if strings.TrimSpace(req.Repeat) == "" {
			// –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç => —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
			taskDate = now
		} else {
			// –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –µ—Å—Ç—å => –≤—ã–∑—ã–≤–∞–µ–º –Ω–µ–∫—É—é NextDate.
			// –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –æ–Ω–∞ —É –≤–∞—Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ¬´–ö–û–î 1¬ª
			nextDateStr, err := nextdate.NextDate(now, req.Date, req.Repeat)
			if err != nil {
				respondWithJSON(w, http.StatusBadRequest, AddTaskResponse{Error: "–Ω–µ–≤–µ—Ä–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"})
				return
			}
			// –ü–∞—Ä—Å–∏–º —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª NextDate
			taskDate, _ = time.Parse(layout, nextDateStr)
		}
	}

	// 7) –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
	newDate := taskDate.Format(layout)
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
	dbConn, err := database.GetDB()
	if err != nil {
		log.Printf("‚ùå [DBConnection] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v", err)
		respondWithJSON(w, http.StatusInternalServerError, AddTaskResponse{Error: "–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"})
		return
	}

	// 8) –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
	query := `INSERT INTO scheduler (date, title, comment, repeat) VALUES (?, ?, ?, ?)`
	res, err := dbConn.Exec(query, newDate, req.Title, req.Comment, req.Repeat)
	if err != nil {
		log.Printf("‚ùå [DBInsert] –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É: %v", err)
		respondWithJSON(w, http.StatusInternalServerError, AddTaskResponse{Error: "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"})
		return
	}

	// 9) –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
	taskID, err := res.LastInsertId()
	if err != nil {
		log.Printf("‚ùå [DBInsert] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: %v", err)
		respondWithJSON(w, http.StatusInternalServerError, AddTaskResponse{Error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏"})
		return
	}

	// 10) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ–¥–æ–º 201 (Created)
	resp := AddTaskResponse{ID: fmt.Sprintf("%d", taskID)}
	log.Printf("‚úÖ [DBInsert] –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID=%d", taskID)
	respondWithJSON(w, http.StatusCreated, resp)
}

// respondWithJSON ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ¬´utils.RespondWithJSON¬ª,
// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞.
func respondWithJSON(w http.ResponseWriter, status int, data interface{}) {
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(data)
}
