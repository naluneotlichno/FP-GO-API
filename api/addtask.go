package api

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "time"

    "github.com/naluneotlichno/FP-GO-API/database"
)

// üî• TaskRequest ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON-–∑–∞–ø—Ä–æ—Å–∞
type TaskRequest struct {
    Date    string `json:"date"`
    Title   string `json:"title"`
    Comment string `json:"comment,omitempty"`
    Repeat  string `json:"repeat,omitempty"`
}

// üî• TaskResponse ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (id –∏–ª–∏ –æ—à–∏–±–∫–∞)
type TaskResponse struct {
    ID    int64  `json:"id,omitempty"`
    Error string `json:"error,omitempty"`
}

// üî• AddTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/task
func AddTaskHandler(w http.ResponseWriter, r *http.Request) {
    log.Println("üî• [AddTaskHandler] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞")

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    w.Header().Set("Content-Type", "application/json; charset=utf-8")

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
    if r.Method != http.MethodPost {
        log.Printf("‚ùå [MethodCheck] –ú–µ—Ç–æ–¥ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", r.Method)
        http.Error(w, `{"error": "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}`, http.StatusMethodNotAllowed)
        return
    }

    // ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
    log.Println("üîç [JSONDecode] –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    var req TaskRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        log.Printf("‚ùå [JSONDecode] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
        http.Error(w, `{"error": "–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON"}`, http.StatusBadRequest)
        return
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if req.Title == "" {
        log.Println("‚ö†Ô∏è [FieldCheck] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏")
        http.Error(w, `{"error": "–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏"}`, http.StatusBadRequest)
        return
    }

    // ‚úÖ –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—É—Å—Ç–∞—è ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é
    if req.Date == "" {
        log.Println("üìÖ [DefaultDate] –î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é.")
        req.Date = time.Now().Format("20060102")
    }

    // ‚úÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
    log.Println("üîç [DateParse] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç YYYYMMDD)")
    taskDate, err := time.Parse("20060102", req.Date)
    if err != nil {
        log.Printf("‚ùå [DateParse] –î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: %v", err)
        http.Error(w, `{"error": "–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"}`, http.StatusBadRequest)
        return
    }

    req.Date = taskDate.Format("20060102") // –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É
    log.Printf("‚úÖ [DateParse] –î–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: %s", req.Date)

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´—Å–µ–≥–æ–¥–Ω—è¬ª (–±–µ–∑ —É—á—ë—Ç–∞ —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç), —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å taskDate
    todayStr := time.Now().Format("20060102")
    today, _ := time.Parse("20060102", todayStr)

    switch {
    case taskDate.Before(today):
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ "—Å–µ–≥–æ–¥–Ω—è"
        log.Println("‚è≤Ô∏è [PastDate] –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        if req.Repeat != "" {
            nextDate, err := NextDate(today, req.Date, req.Repeat)
            if err != nil {
                log.Printf("‚ùå [RepeatRule] –û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %v", err)
                http.Error(w,
                    fmt.Sprintf(`{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %s"}`, err.Error()),
                    http.StatusBadRequest,
                )
                return
            }
            req.Date = nextDate
            log.Printf("‚úÖ [RepeatRule] –ù–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %s", req.Date)
        } else {
            log.Println("üìÖ [PastDate] –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –°—Ç–∞–≤–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.")
            req.Date = todayStr
        }
    case taskDate.Equal(today):
        // –î–∞—Ç–∞ —Ä–æ–≤–Ω–æ "—Å–µ–≥–æ–¥–Ω—è" - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        log.Println("‚úÖ [SameDate] –î–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
    default:
        // taskDate.After(today) ‚Üí –±—É–¥—É—â–µ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        log.Println("üöÄ [FutureDate] –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º. –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    }

    // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log.Println("üîó [DBConnection] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    db, err := database.GetDB()
    if err != nil {
        log.Printf("‚ùå [DBConnection] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
        http.Error(w, `{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}`, http.StatusInternalServerError)
        return
    }
    log.Println("‚úÖ [DBConnection] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")

    // ‚úÖ –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    log.Println("üìù [DBInsert] –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    query := `INSERT INTO scheduler (date, title, comment, repeat) VALUES (?, ?, ?, ?)`
    res, err := db.Exec(query, req.Date, req.Title, req.Comment, req.Repeat)
    if err != nil {
        log.Printf("‚ùå [DBInsert] –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É: %v", err)
        http.Error(w, `{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"}`, http.StatusInternalServerError)
        return
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    log.Println("üÜî [DBInsert] –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
    taskID, err := res.LastInsertId()
    if err != nil {
        log.Printf("‚ùå [DBInsert] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: %v", err)
        http.Error(w, `{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏"}`, http.StatusInternalServerError)
        return
    }
    log.Printf("‚úÖ [DBInsert] –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: %d", taskID)

    // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    resp := TaskResponse{ID: taskID}
    log.Printf("üì§ [Response] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: %+v", resp)
    if err := json.NewEncoder(w).Encode(resp); err != nil {
        log.Printf("‚ùå [Response] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
    }
}
