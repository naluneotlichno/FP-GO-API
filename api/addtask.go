package api

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/naluneotlichno/FP-GO-API/database"
)

// üî• GetSingleTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/task?id=<ID>
func GetSingleTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üî• [GetSingleTaskHandler] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É GET /api/task")

	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
	if r.Method != http.MethodGet {
		log.Printf("‚ùå [MethodCheck] –ú–µ—Ç–æ–¥ %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", r.Method)
		http.Error(w, `{"error":"–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}`, http.StatusMethodNotAllowed)
		return
	}

	// –°—á–∏—Ç—ã–≤–∞–µ–º ?id=...
	idStr := r.URL.Query().Get("id")
	if idStr == "" {
		// –¢–µ—Å—Ç –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –±–µ–∑ ID –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ —Å –ø–æ–ª–µ–º "error"
		log.Println("‚ö†Ô∏è [GetSingleTaskHandler] –ü–∞—Ä–∞–º–µ—Ç—Ä id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.")
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, `{"error":"–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä id"}`)
		return
	}

	// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —á–∏—Å–ª–æ
	taskID, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		// –ï—Å–ª–∏ id –Ω–µ —á–∏—Å–ª–æ ‚Äî —Ç–æ–∂–µ –æ—à–∏–±–∫–∞
		log.Printf("‚ùå [GetSingleTaskHandler] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id: %s", idStr)
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, `{"error":"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id: %s"}`, idStr)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ —á–µ—Ä–µ–∑ —Ç–≤–æ–π –ø–∞–∫–µ—Ç database
	db, err := database.GetDB()
	if err != nil {
		log.Printf("‚ùå [DBConnection] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"error":"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}`)
		return
	}

	// –î–æ—Å—Ç–∞—ë–º –∑–∞–¥–∞—á—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scheduler
	var (
		tID      int64
		tDate    string
		tTitle   string
		tComment string
		tRepeat  string
	)
	row := db.QueryRow(`SELECT id, date, title, comment, repeat 
                        FROM scheduler 
                        WHERE id = ?`, taskID)
	err = row.Scan(&tID, &tDate, &tTitle, &tComment, &tRepeat)
	if err != nil {
		if err == sql.ErrNoRows {
			// –ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏
			log.Printf("‚ö†Ô∏è [GetSingleTaskHandler] –ó–∞–¥–∞—á–∞ —Å id=%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", taskID)
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprintf(w, `{"error":"–ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`, taskID)
			return
		}
		// –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
		log.Printf("‚ùå [GetSingleTaskHandler] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, `{"error":"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î"}`)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç ‚Äî —Ç–µ—Å—Ç –∂–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –ø–æ–ª—è:
	resp := map[string]string{
		"id":      strconv.FormatInt(tID, 10),
		"date":    tDate,
		"title":   tTitle,
		"comment": tComment,
		"repeat":  tRepeat,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		log.Printf("‚ùå [GetSingleTaskHandler] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}
}
