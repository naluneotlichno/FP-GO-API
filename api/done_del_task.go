package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/naluneotlichno/FP-GO-API/database"
	"github.com/naluneotlichno/FP-GO-API/nextdate"
)

// DoneTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /api/task/done?id=...
func DoneTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üî• [DoneTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ /api/task/done –ø–æ–ª—É—á–µ–Ω...")

	idStr := r.URL.Query().Get("id")
	log.Printf("üîç [DoneTaskHandler] ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: %s\n", idStr)
	if idStr == "" {
		log.Println("üö® [DoneTaskHandler] ID –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	task, err := database.GetTaskByID(id)
	if err != nil {
		if errors.Is(err, database.ErrTask) {
			jsonResponse(w, http.StatusNotFound, map[string]string{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
			return
		}
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
		return
	}

	log.Printf("‚úÖ [DoneTaskHandler] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", task)

	if task.Repeat == "" {
		log.Printf("üîç [DoneTaskHandler] repeat –ø—É—Å—Ç–æ–π. –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É ID=%s\n", id)
		if err := database.DeleteTask(id); err != nil {
			log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
			jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
			return
		}
	} else {
		now := time.Now()
		nextDate, err := nextdate.NextDate(now, task.Date, task.Repeat, "done")
		if err != nil {
			log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: %v\n", err)
			jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã"})
			return
		}

		task.Date = nextDate
		err = database.UpdateTask(task)
		if err != nil {
			jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
			return
		}
	}

	jsonResponse(w, http.StatusOK, map[string]any{})
}

func jsonResponse(w http.ResponseWriter, status int, payload interface{}) {
	log.Printf("üì§ [jsonResponse] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å=%d, payload=%#v\n", status, payload)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(payload)
}

// DeleteTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DELETE /api/task?id=...
func DeleteTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üî• [DeleteTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ DELETE /api/task –ø–æ–ª—É—á–µ–Ω...")

	idStr := r.URL.Query().Get("id")
	log.Printf("üîç [DeleteTaskHandler] ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: %s\n", idStr)
	if idStr == "" {
		log.Println("üö® [DeleteTaskHandler] ID –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		log.Printf("üö® [DeleteTaskHandler] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	log.Printf("üîç [DeleteTaskHandler] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID=%s\n", id)
	if err := database.DeleteTask(id); err != nil {
		if errors.Is(err, fmt.Errorf("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
			jsonResponse(w, http.StatusNotFound, map[string]string{"error": err.Error()})
			return
		}
		log.Printf("üö® [DeleteTaskHandler] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusNotFound, map[string]string{"error": err.Error()})
		return
	}

	log.Printf("‚úÖ [DeleteTaskHandler] –ó–∞–¥–∞—á–∞ ID=%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)
	jsonResponse(w, http.StatusOK, map[string]interface{}{})
}

// NextDateAdapter ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É —Ç–≤–æ–µ–π NextDate(...) –∏ —Ç–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç—ã.
func NextDateAdapter(oldDate time.Time, repeat string) (time.Time, error) {
	log.Printf("üîç [NextDateAdapter] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: oldDate=%s, repeat=%s\n", oldDate.Format("20060102"), repeat)

	repeatParts := strings.Split(repeat, " ")
	if len(repeatParts) != 2 || repeatParts[0] != "d" {
		err := fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç repeat: %s", repeat)
		log.Printf("üö® [NextDateAdapter] %v\n", err)
		return time.Time{}, err
	}

	days, err := strconv.Atoi(repeatParts[1])
	if err != nil {
		log.Printf("üö® [NextDateAdapter] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–π: %v\n", err)
		return time.Time{}, err
	}

	newDate := oldDate.AddDate(0, 0, days)
	log.Printf("‚úÖ [NextDateAdapter] –ù–æ–≤–∞—è –¥–∞—Ç–∞: %s\n", newDate.Format("20060102"))
	return newDate, nil
}
