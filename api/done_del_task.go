package api

import (
    "database/sql"
    "errors"
    "fmt"
    "log"
    "net/http"
    "strconv"
    "strings"
    "time"
    "encoding/json"

    "github.com/naluneotlichno/FP-GO-API/database"
)

// DoneTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /api/task/done?id=...
//  1) –ï—Å–ª–∏ repeat –ø—É—Å—Ç–æ–π ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É.
//  2) –ï—Å–ª–∏ repeat –µ—Å—Ç—å ‚Äî –º–µ–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞ "—Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑".
func DoneTaskHandler(w http.ResponseWriter, r *http.Request) {
    log.Println("üî• [DoneTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ /api/task/done –ø–æ–ª—É—á–µ–Ω...")

    id := r.URL.Query().Get("id")
    if id == "" {
        log.Println("üö® [DoneTaskHandler] –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id")
        http.Error(w, `{"error":"–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"}`, http.StatusBadRequest)
        return
    }
    log.Printf("üîç [DoneTaskHandler] –ò—â–µ–º –∑–∞–¥–∞—á—É —Å id=%s\n", id)

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task, err := getTaskByID(id)
    if err != nil {
        log.Printf("üö® [DoneTaskHandler] –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %v\n", err)
        http.Error(w, `{"error":"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`, http.StatusNotFound)
        return
    }
    log.Printf("‚úÖ [DoneTaskHandler] –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: ID=%s, Date=%s, Repeat=%s\n", task.ID, task.Date, task.Repeat)

    // –ï—Å–ª–∏ repeat –ø—É—Å—Ç–æ–π ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    if strings.TrimSpace(task.Repeat) == "" {
        log.Printf("‚ö†Ô∏è [DoneTaskHandler] repeat –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É id=%s\n", id)
        if err := deleteTaskByID(id); err != nil {
            log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v\n", err)
            response := map[string]string{"error": err.Error()}
            w.Header().Set("Content-Type", "application/json")
            json.NewEncoder(w).Encode(response)
            return
        }
        log.Println("‚úÖ [DoneTaskHandler] –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º {}")

        w.Header().Set("Content-Type", "application/json")
        w.Write([]byte("{}"))
        return
    }

    // –ï—Å–ª–∏ repeat –µ—Å—Ç—å, –º–µ–Ω—è–µ–º –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –¥–Ω—è)
    oldDate, err := time.Parse("20060102", task.Date)
    if err != nil {
        log.Printf("üö® [DoneTaskHandler] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤ –ë–î (%s): %v\n", task.Date, err)
        http.Error(w, `{"error":"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ"}`, http.StatusBadRequest)
        return
    }
    log.Printf("üîç [DoneTaskHandler] –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏: %s\n", oldDate.Format("20060102"))

    // –í—ã–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ—é NextDate(...)
    newDate, err := NextDateAdapter(oldDate, task.Repeat)
    if err != nil {
        log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ NextDateAdapter: %v\n", err)
        http.Error(w, fmt.Sprintf(`{"error":"%s"}`, err.Error()), http.StatusBadRequest)
        return
    }
    log.Printf("‚úÖ [DoneTaskHandler] –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏: %s\n", newDate.Format("20060102"))

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    if err := updateTaskDate(id, newDate.Format("20060102")); err != nil {
        log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏: %v\n", err)
        http.Error(w, fmt.Sprintf(`{"error":"%s"}`, err.Error()), http.StatusBadRequest)
        return
    }
    log.Println("‚úÖ [DoneTaskHandler] –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    // –£—Å–ø–µ—Ö
    w.Header().Set("Content-Type", "application/json")
    w.Write([]byte("{}"))
}

// DeleteTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DELETE /api/task?id=...
// –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {} –∏–ª–∏ {"error":"..."}.
func DeleteTaskHandler(w http.ResponseWriter, r *http.Request) {
    log.Println("üî• [DeleteTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ DELETE /api/task –ø–æ–ª—É—á–µ–Ω...")

    id := r.URL.Query().Get("id")
    if id == "" {
        log.Println("üö® [DeleteTaskHandler] –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id")
        http.Error(w, `{"error":"–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"}`, http.StatusBadRequest)
        return
    }
    log.Printf("üîç [DeleteTaskHandler] –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É —Å id=%s\n", id)

    if err := deleteTaskByID(id); err != nil {
        log.Printf("üö® [DeleteTaskHandler] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v\n", err)
        response := map[string]string{"error": err.Error()}
        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(response)
        return
    }
    log.Println("‚úÖ [DeleteTaskHandler] –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º {}")

    w.Header().Set("Content-Type", "application/json")
    w.Write([]byte("{}"))
}

// NextDateAdapter ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É —Ç–≤–æ–µ–π NextDate(now, date, repeat) –∏ —Ç–µ–º,
// —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç—ã (–ø—Ä–æ—Å—Ç–æ time.Time –Ω–∞ –≤—ã—Ö–æ–¥).
func NextDateAdapter(oldDate time.Time, repeat string) (time.Time, error) {
    log.Println("üîç [NextDateAdapter] –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ç–≤–æ–µ–π NextDate(...).")

    // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º oldDate –≤ —Å—Ç—Ä–æ–∫—É, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
    oldDateStr := oldDate.Format("20060102")

    // –í—ã–∑—ã–≤–∞–µ–º —Ç–≤–æ—é —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
    newDateStr, err := NextDate(oldDate, oldDateStr, repeat)
    if err != nil {
        log.Printf("üö® [NextDateAdapter] –û—à–∏–±–∫–∞ –≤ —Ç–≤–æ–µ–π NextDate: %v\n", err)
        return time.Time{}, err
    }

    parsed, err := time.Parse("20060102", newDateStr)
    if err != nil {
        log.Printf("üö® [NextDateAdapter] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '%s': %v\n", newDateStr, err)
        return time.Time{}, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '%s': %w", newDateStr, err)
    }
    log.Printf("‚úÖ [NextDateAdapter] –ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞: %s\n", parsed.Format("20060102"))
    return parsed, nil
}

// ----------------------------------------------------------------------
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (scheduler)
// ----------------------------------------------------------------------

// getTaskByID —á–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scheduler.
func getTaskByID(id string) (Task, error) {
    log.Println("üîç [getTaskByID] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    db, err := database.GetDB() // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (db *sql.DB, err error)
    if err != nil {
        log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DB: %v\n", err)
        return Task{}, errors.New("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    }

    log.Printf("üîç [getTaskByID] –ü–∞—Ä—Å–∏–º id='%s' –≤ int...\n", id)
    idInt, err := strconv.ParseInt(id, 10, 64)
    if err != nil {
        log.Printf("üö® [getTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID='%s': %v\n", id, err)
        return Task{}, errors.New("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    var t Task
    log.Println("üîç [getTaskByID] –í—ã–ø–æ–ª–Ω—è–µ–º SELECT ... FROM scheduler WHERE id=?")
    row := db.QueryRow(`SELECT id, date, title, comment, repeat FROM scheduler WHERE id=?`, idInt)
    err = row.Scan(&t.ID, &t.Date, &t.Title, &t.Comment, &t.Repeat)
    if err != nil {
        if err == sql.ErrNoRows {
            log.Println("üö® [getTaskByID] –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return Task{}, errors.New("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        }
        log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
        return Task{}, err
    }

    log.Printf("‚úÖ [getTaskByID] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", t)
    return t, nil
}

// deleteTaskByID —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scheduler.
func deleteTaskByID(id string) error {
    log.Println("üîç [deleteTaskByID] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    db, err := database.GetDB()
    if err != nil {
        log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DB: %v\n", err)
        return errors.New("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    }

    log.Printf("üîç [deleteTaskByID] –ü–∞—Ä—Å–∏–º id='%s' –≤ int...\n", id)
    idInt, err := strconv.ParseInt(id, 10, 64)
    if err != nil {
        log.Printf("üö® [deleteTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID='%s': %v\n", id, err)
        return errors.New("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    log.Println("üîç [deleteTaskByID] –í—ã–ø–æ–ª–Ω—è–µ–º DELETE FROM scheduler WHERE id=?")
    res, err := db.Exec(`DELETE FROM scheduler WHERE id=?`, idInt)
    if err != nil {
        log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ DELETE: %v\n", err)
        return err
    }

    n, _ := res.RowsAffected()
    if n == 0 {
        log.Println("üö® [deleteTaskByID] –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
        return errors.New("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }
    log.Println("‚úÖ [deleteTaskByID] –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    return nil
}

// updateTaskDate –º–µ–Ω—è–µ—Ç –ø–æ–ª–µ date –≤ —Ç–∞–±–ª–∏—Ü–µ scheduler.
func updateTaskDate(id, newDate string) error {
    log.Println("üîç [updateTaskDate] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    db, err := database.GetDB()
    if err != nil {
        log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DB: %v\n", err)
        return errors.New("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    }

    log.Printf("üîç [updateTaskDate] –ü–∞—Ä—Å–∏–º id='%s' –≤ int...\n", id)
    idInt, err := strconv.ParseInt(id, 10, 64)
    if err != nil {
        log.Printf("üö® [updateTaskDate] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID='%s': %v\n", id, err)
        return errors.New("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
    }

    log.Printf("üîç [updateTaskDate] UPDATE scheduler SET date='%s' WHERE id=%d\n", newDate, idInt)
    res, err := db.Exec(`UPDATE scheduler SET date=? WHERE id=?`, newDate, idInt)
    if err != nil {
        log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ UPDATE: %v\n", err)
        return err
    }

    n, _ := res.RowsAffected()
    if n == 0 {
        log.Println("üö® [updateTaskDate] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º id")
        return errors.New("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }
    log.Println("‚úÖ [updateTaskDate] –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    return nil
}
