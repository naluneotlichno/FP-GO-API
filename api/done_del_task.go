package api

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/naluneotlichno/FP-GO-API/database"
)

// DoneTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /api/task/done?id=...
// DoneTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /api/task/done?id=...
func DoneTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üî• [DoneTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ /api/task/done –ø–æ–ª—É—á–µ–Ω...")

	id := r.URL.Query().Get("id")
	log.Printf("üîç [DoneTaskHandler] ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: %s\n", id)
	if id == "" {
		log.Println("üö® [DoneTaskHandler] ID –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	task, err := getTaskByID(id)
	if err != nil {
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v\n", err)
		jsonResponse(w, http.StatusNotFound, map[string]string{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}
	log.Printf("‚úÖ [DoneTaskHandler] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", task)

	if strings.TrimSpace(task.Repeat) == "" {
		log.Printf("üîç [DoneTaskHandler] repeat –ø—É—Å—Ç–æ–π. –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É ID=%s\n", id)
		if err := deleteTaskByID(id); err != nil {
			log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
			jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": err.Error()})
			return
		}
		log.Printf("‚úÖ [DoneTaskHandler] –ó–∞–¥–∞—á–∞ ID=%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)
		jsonResponse(w, http.StatusOK, map[string]any{})
		return
	}

	oldDate, err := time.Parse("20060102", task.Date)
	if err != nil {
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ (%s): %v\n", task.Date, err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏"})
		return
	}
	log.Printf("‚úÖ [DoneTaskHandler] –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏: %s\n", oldDate.Format("20060102"))

	newDate, err := NextDateAdapter(oldDate, task.Repeat)
	if err != nil {
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã: %v\n", err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"})
		return
	}
	log.Printf("‚úÖ [DoneTaskHandler] –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏: %s\n", newDate.Format("20060102"))

	if err := updateTaskDate(id, newDate.Format("20060102")); err != nil {
		log.Printf("üö® [DoneTaskHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": err.Error()})
		return
	}
	log.Printf("‚úÖ [DoneTaskHandler] –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ ID=%s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n", id)

	jsonResponse(w, http.StatusOK, map[string]any{})
}

func jsonResponse(w http.ResponseWriter, status int, payload interface{}) {
	log.Printf("üì§ [jsonResponse] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å=%d, payload=%#v\n", status, payload)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	if err := json.NewEncoder(w).Encode(payload); err != nil {
		log.Printf("üö® [jsonResponse] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		http.Error(w, `{"error":"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"}`, http.StatusInternalServerError)
	}
}


// DeleteTaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DELETE /api/task?id=...
func DeleteTaskHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üî• [DeleteTaskHandler] –ó–∞–ø—Ä–æ—Å –Ω–∞ DELETE /api/task –ø–æ–ª—É—á–µ–Ω...")

	id := r.URL.Query().Get("id")
	log.Printf("üîç [DeleteTaskHandler] ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: %s\n", id)
	if id == "" {
		log.Println("üö® [DeleteTaskHandler] ID –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"})
		return
	}

	log.Printf("üîç [DeleteTaskHandler] –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID=%s\n", id)
	if err := deleteTaskByID(id); err != nil {
		log.Printf("üö® [DeleteTaskHandler] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID=%s: %v\n", id, err)
		jsonResponse(w, http.StatusNotFound, map[string]string{"error": err.Error()})
		return
	}
	log.Printf("‚úÖ [DeleteTaskHandler] –ó–∞–¥–∞—á–∞ ID=%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)

	jsonResponse(w, http.StatusOK, map[string]any{})
}

// NextDateAdapter ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É —Ç–≤–æ–µ–π NextDate(...) –∏ —Ç–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç—ã.
func NextDateAdapter(oldDate time.Time, repeat string) (time.Time, error) {
	log.Printf("üîç [NextDateAdapter] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: oldDate=%s, repeat=%s\n", oldDate.Format("20060102"), repeat)

	repeatParts := strings.Split(repeat, " ")
	if len(repeatParts) != 2 || repeatParts[0] != "d" {
		err := fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç repeat: %s", repeat)
		log.Printf("üö® [NextDateAdapter] %v\n", err)
		return time.Time{}, err
	}

	days, err := strconv.Atoi(repeatParts[1])
	if err != nil {
		log.Printf("üö® [NextDateAdapter] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–π: %v\n", err)
		return time.Time{}, err
	}

	newDate := oldDate.AddDate(0, 0, days)
	log.Printf("‚úÖ [NextDateAdapter] –ù–æ–≤–∞—è –¥–∞—Ç–∞: %s\n", newDate.Format("20060102"))
	return newDate, nil
}

func getTaskByID(id string) (Task, error) {
	log.Printf("üîç [getTaskByID] –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É ID=%s –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n", id)
	db, err := database.GetDB()
	if err != nil {
		log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return Task{}, errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [getTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return Task{}, errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	var t Task
	log.Println("üîç [getTaskByID] –í—ã–ø–æ–ª–Ω—è–µ–º SELECT...")
	row := db.QueryRow(`SELECT id, date, title, comment, repeat FROM scheduler WHERE id=?`, idInt)
	err = row.Scan(&t.ID, &t.Date, &t.Title, &t.Comment, &t.Repeat)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("üö® [getTaskByID] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
			return Task{}, errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		}
		log.Printf("üö® [getTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return Task{}, err
	}
	log.Printf("‚úÖ [getTaskByID] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %#v\n", t)
	return t, nil
}

func deleteTaskByID(id string) error {
	log.Printf("üîç [deleteTaskByID] –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É ID=%s –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n", id)
	db, err := database.GetDB()
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	res, err := db.Exec(`DELETE FROM scheduler WHERE id=?`, idInt)
	if err != nil {
		log.Printf("üö® [deleteTaskByID] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DELETE: %v\n", err)
		return err
	}

	n, _ := res.RowsAffected()
	if n == 0 {
		log.Printf("üö® [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	log.Printf("‚úÖ [deleteTaskByID] –ó–∞–¥–∞—á–∞ ID=%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n", id)
	return nil
}

func updateTaskDate(id, newDate string) error {
	log.Printf("üîç [updateTaskDate] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ ID=%s –Ω–∞ %s\n", id, newDate)
	db, err := database.GetDB()
	if err != nil {
		log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v\n", err)
		return errors.New("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		log.Printf("üö® [updateTaskDate] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID=%s: %v\n", id, err)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	res, err := db.Exec(`UPDATE scheduler SET date=? WHERE id=?`, newDate, idInt)
	if err != nil {
		log.Printf("üö® [updateTaskDate] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UPDATE: %v\n", err)
		return err
	}

	n, _ := res.RowsAffected()
	if n == 0 {
		log.Printf("üö® [updateTaskDate] –ó–∞–¥–∞—á–∞ ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n", id)
		return errors.New("–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	log.Printf("‚úÖ [updateTaskDate] –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ ID=%s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n", id)
	return nil
}